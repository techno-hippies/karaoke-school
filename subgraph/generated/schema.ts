// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
  Int8,
} from "@graphprotocol/graph-ts";

export class Song extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Song entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Song must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Song", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Song | null {
    return changetype<Song | null>(store.get_in_block("Song", id));
  }

  static load(id: string): Song | null {
    return changetype<Song | null>(store.get("Song", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get geniusId(): BigInt {
    let value = this.get("geniusId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set geniusId(value: BigInt) {
    this.set("geniusId", Value.fromBigInt(value));
  }

  get metadataUri(): string {
    let value = this.get("metadataUri");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set metadataUri(value: string) {
    this.set("metadataUri", Value.fromString(value));
  }

  get registeredBy(): Bytes {
    let value = this.get("registeredBy");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set registeredBy(value: Bytes) {
    this.set("registeredBy", Value.fromBytes(value));
  }

  get geniusArtistId(): BigInt {
    let value = this.get("geniusArtistId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set geniusArtistId(value: BigInt) {
    this.set("geniusArtistId", Value.fromBigInt(value));
  }

  get registeredAt(): BigInt {
    let value = this.get("registeredAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set registeredAt(value: BigInt) {
    this.set("registeredAt", Value.fromBigInt(value));
  }

  get segmentCount(): i32 {
    let value = this.get("segmentCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set segmentCount(value: i32) {
    this.set("segmentCount", Value.fromI32(value));
  }

  get performanceCount(): i32 {
    let value = this.get("performanceCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set performanceCount(value: i32) {
    this.set("performanceCount", Value.fromI32(value));
  }

  get translationCount(): i32 {
    let value = this.get("translationCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set translationCount(value: i32) {
    this.set("translationCount", Value.fromI32(value));
  }
}

export class Segment extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Segment entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Segment must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Segment", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Segment | null {
    return changetype<Segment | null>(store.get_in_block("Segment", id));
  }

  static load(id: string): Segment | null {
    return changetype<Segment | null>(store.get("Segment", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get segmentHash(): Bytes {
    let value = this.get("segmentHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set segmentHash(value: Bytes) {
    this.set("segmentHash", Value.fromBytes(value));
  }

  get grc20WorkId(): string {
    let value = this.get("grc20WorkId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set grc20WorkId(value: string) {
    this.set("grc20WorkId", Value.fromString(value));
  }

  get spotifyTrackId(): string {
    let value = this.get("spotifyTrackId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set spotifyTrackId(value: string) {
    this.set("spotifyTrackId", Value.fromString(value));
  }

  get segmentStartMs(): i32 {
    let value = this.get("segmentStartMs");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set segmentStartMs(value: i32) {
    this.set("segmentStartMs", Value.fromI32(value));
  }

  get segmentEndMs(): i32 {
    let value = this.get("segmentEndMs");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set segmentEndMs(value: i32) {
    this.set("segmentEndMs", Value.fromI32(value));
  }

  get metadataUri(): string {
    let value = this.get("metadataUri");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set metadataUri(value: string) {
    this.set("metadataUri", Value.fromString(value));
  }

  get registeredBy(): Bytes {
    let value = this.get("registeredBy");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set registeredBy(value: Bytes) {
    this.set("registeredBy", Value.fromBytes(value));
  }

  get registeredAt(): BigInt {
    let value = this.get("registeredAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set registeredAt(value: BigInt) {
    this.set("registeredAt", Value.fromBigInt(value));
  }

  get instrumentalUri(): string | null {
    let value = this.get("instrumentalUri");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set instrumentalUri(value: string | null) {
    if (!value) {
      this.unset("instrumentalUri");
    } else {
      this.set("instrumentalUri", Value.fromString(<string>value));
    }
  }

  get alignmentUri(): string | null {
    let value = this.get("alignmentUri");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set alignmentUri(value: string | null) {
    if (!value) {
      this.unset("alignmentUri");
    } else {
      this.set("alignmentUri", Value.fromString(<string>value));
    }
  }

  get processedAt(): BigInt | null {
    let value = this.get("processedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set processedAt(value: BigInt | null) {
    if (!value) {
      this.unset("processedAt");
    } else {
      this.set("processedAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get translationCount(): i32 {
    let value = this.get("translationCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set translationCount(value: i32) {
    this.set("translationCount", Value.fromI32(value));
  }

  get performances(): PerformanceLoader {
    return new PerformanceLoader(
      "Segment",
      this.get("id")!.toString(),
      "performances",
    );
  }

  get translations(): TranslationLoader {
    return new TranslationLoader(
      "Segment",
      this.get("id")!.toString(),
      "translations",
    );
  }

  get performanceCount(): i32 {
    let value = this.get("performanceCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set performanceCount(value: i32) {
    this.set("performanceCount", Value.fromI32(value));
  }

  get averageScore(): BigDecimal {
    let value = this.get("averageScore");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set averageScore(value: BigDecimal) {
    this.set("averageScore", Value.fromBigDecimal(value));
  }

  get hasInstrumental(): boolean {
    let value = this.get("hasInstrumental");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set hasInstrumental(value: boolean) {
    this.set("hasInstrumental", Value.fromBoolean(value));
  }

  get hasAlignments(): boolean {
    let value = this.get("hasAlignments");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set hasAlignments(value: boolean) {
    this.set("hasAlignments", Value.fromBoolean(value));
  }
}

export class Translation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Translation entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Translation must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Translation", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Translation | null {
    return changetype<Translation | null>(
      store.get_in_block("Translation", id),
    );
  }

  static load(id: string): Translation | null {
    return changetype<Translation | null>(store.get("Translation", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get segment(): string {
    let value = this.get("segment");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set segment(value: string) {
    this.set("segment", Value.fromString(value));
  }

  get segmentHash(): Bytes {
    let value = this.get("segmentHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set segmentHash(value: Bytes) {
    this.set("segmentHash", Value.fromBytes(value));
  }

  get languageCode(): string {
    let value = this.get("languageCode");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set languageCode(value: string) {
    this.set("languageCode", Value.fromString(value));
  }

  get translationUri(): string {
    let value = this.get("translationUri");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set translationUri(value: string) {
    this.set("translationUri", Value.fromString(value));
  }

  get translationSource(): string {
    let value = this.get("translationSource");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set translationSource(value: string) {
    this.set("translationSource", Value.fromString(value));
  }

  get confidenceScore(): i32 {
    let value = this.get("confidenceScore");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set confidenceScore(value: i32) {
    this.set("confidenceScore", Value.fromI32(value));
  }

  get validated(): boolean {
    let value = this.get("validated");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set validated(value: boolean) {
    this.set("validated", Value.fromBoolean(value));
  }

  get addedBy(): Bytes {
    let value = this.get("addedBy");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set addedBy(value: Bytes) {
    this.set("addedBy", Value.fromBytes(value));
  }

  get addedAt(): BigInt {
    let value = this.get("addedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set addedAt(value: BigInt) {
    this.set("addedAt", Value.fromBigInt(value));
  }

  get updatedAt(): BigInt | null {
    let value = this.get("updatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set updatedAt(value: BigInt | null) {
    if (!value) {
      this.unset("updatedAt");
    } else {
      this.set("updatedAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get enabled(): boolean {
    let value = this.get("enabled");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set enabled(value: boolean) {
    this.set("enabled", Value.fromBoolean(value));
  }

  get confidenceLevel(): string {
    let value = this.get("confidenceLevel");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set confidenceLevel(value: string) {
    this.set("confidenceLevel", Value.fromString(value));
  }
}

export class Performance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Performance entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Performance must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Performance", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Performance | null {
    return changetype<Performance | null>(
      store.get_in_block("Performance", id),
    );
  }

  static load(id: string): Performance | null {
    return changetype<Performance | null>(store.get("Performance", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get performanceId(): BigInt {
    let value = this.get("performanceId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set performanceId(value: BigInt) {
    this.set("performanceId", Value.fromBigInt(value));
  }

  get segment(): string {
    let value = this.get("segment");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set segment(value: string) {
    this.set("segment", Value.fromString(value));
  }

  get performer(): string {
    let value = this.get("performer");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set performer(value: string) {
    this.set("performer", Value.fromString(value));
  }

  get performerAddress(): Bytes {
    let value = this.get("performerAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set performerAddress(value: Bytes) {
    this.set("performerAddress", Value.fromBytes(value));
  }

  get score(): i32 {
    let value = this.get("score");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set score(value: i32) {
    this.set("score", Value.fromI32(value));
  }

  get metadataUri(): string {
    let value = this.get("metadataUri");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set metadataUri(value: string) {
    this.set("metadataUri", Value.fromString(value));
  }

  get gradedAt(): BigInt {
    let value = this.get("gradedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set gradedAt(value: BigInt) {
    this.set("gradedAt", Value.fromBigInt(value));
  }

  get songId(): BigInt {
    let value = this.get("songId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set songId(value: BigInt) {
    this.set("songId", Value.fromBigInt(value));
  }

  get segmentHash(): Bytes {
    let value = this.get("segmentHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set segmentHash(value: Bytes) {
    this.set("segmentHash", Value.fromBytes(value));
  }
}

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Account entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Account must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Account", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Account | null {
    return changetype<Account | null>(store.get_in_block("Account", id));
  }

  static load(id: string): Account | null {
    return changetype<Account | null>(store.get("Account", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get lensAccountAddress(): Bytes {
    let value = this.get("lensAccountAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set lensAccountAddress(value: Bytes) {
    this.set("lensAccountAddress", Value.fromBytes(value));
  }

  get pkpAddress(): Bytes {
    let value = this.get("pkpAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set pkpAddress(value: Bytes) {
    this.set("pkpAddress", Value.fromBytes(value));
  }

  get username(): string {
    let value = this.get("username");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set username(value: string) {
    this.set("username", Value.fromString(value));
  }

  get metadataUri(): string {
    let value = this.get("metadataUri");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set metadataUri(value: string) {
    this.set("metadataUri", Value.fromString(value));
  }

  get geniusArtistId(): i32 {
    let value = this.get("geniusArtistId");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set geniusArtistId(value: i32) {
    this.set("geniusArtistId", Value.fromI32(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get updatedAt(): BigInt {
    let value = this.get("updatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set updatedAt(value: BigInt) {
    this.set("updatedAt", Value.fromBigInt(value));
  }

  get verified(): boolean {
    let value = this.get("verified");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set verified(value: boolean) {
    this.set("verified", Value.fromBoolean(value));
  }

  get performances(): PerformanceLoader {
    return new PerformanceLoader(
      "Account",
      this.get("id")!.toString(),
      "performances",
    );
  }

  get performanceCount(): i32 {
    let value = this.get("performanceCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set performanceCount(value: i32) {
    this.set("performanceCount", Value.fromI32(value));
  }

  get totalScore(): BigInt {
    let value = this.get("totalScore");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalScore(value: BigInt) {
    this.set("totalScore", Value.fromBigInt(value));
  }

  get averageScore(): BigDecimal {
    let value = this.get("averageScore");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set averageScore(value: BigDecimal) {
    this.set("averageScore", Value.fromBigDecimal(value));
  }

  get bestScore(): i32 {
    let value = this.get("bestScore");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set bestScore(value: i32) {
    this.set("bestScore", Value.fromI32(value));
  }
}

export class GlobalStats extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GlobalStats entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type GlobalStats must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("GlobalStats", id.toString(), this);
    }
  }

  static loadInBlock(id: string): GlobalStats | null {
    return changetype<GlobalStats | null>(
      store.get_in_block("GlobalStats", id),
    );
  }

  static load(id: string): GlobalStats | null {
    return changetype<GlobalStats | null>(store.get("GlobalStats", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalSongs(): i32 {
    let value = this.get("totalSongs");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set totalSongs(value: i32) {
    this.set("totalSongs", Value.fromI32(value));
  }

  get totalSegments(): i32 {
    let value = this.get("totalSegments");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set totalSegments(value: i32) {
    this.set("totalSegments", Value.fromI32(value));
  }

  get totalPerformances(): i32 {
    let value = this.get("totalPerformances");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set totalPerformances(value: i32) {
    this.set("totalPerformances", Value.fromI32(value));
  }

  get totalAccounts(): i32 {
    let value = this.get("totalAccounts");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set totalAccounts(value: i32) {
    this.set("totalAccounts", Value.fromI32(value));
  }

  get totalTranslations(): i32 {
    let value = this.get("totalTranslations");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set totalTranslations(value: i32) {
    this.set("totalTranslations", Value.fromI32(value));
  }

  get enabledTranslations(): i32 {
    let value = this.get("enabledTranslations");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set enabledTranslations(value: i32) {
    this.set("enabledTranslations", Value.fromI32(value));
  }
}

export class SegmentLeaderboard extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SegmentLeaderboard entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SegmentLeaderboard must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("SegmentLeaderboard", id.toString(), this);
    }
  }

  static loadInBlock(id: string): SegmentLeaderboard | null {
    return changetype<SegmentLeaderboard | null>(
      store.get_in_block("SegmentLeaderboard", id),
    );
  }

  static load(id: string): SegmentLeaderboard | null {
    return changetype<SegmentLeaderboard | null>(
      store.get("SegmentLeaderboard", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get segment(): string {
    let value = this.get("segment");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set segment(value: string) {
    this.set("segment", Value.fromString(value));
  }

  get totalPerformers(): i32 {
    let value = this.get("totalPerformers");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set totalPerformers(value: i32) {
    this.set("totalPerformers", Value.fromI32(value));
  }

  get averageScore(): BigDecimal {
    let value = this.get("averageScore");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set averageScore(value: BigDecimal) {
    this.set("averageScore", Value.fromBigDecimal(value));
  }

  get highestScore(): i32 {
    let value = this.get("highestScore");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set highestScore(value: i32) {
    this.set("highestScore", Value.fromI32(value));
  }

  get lowestScore(): i32 {
    let value = this.get("lowestScore");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set lowestScore(value: i32) {
    this.set("lowestScore", Value.fromI32(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get updatedAt(): BigInt {
    let value = this.get("updatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set updatedAt(value: BigInt) {
    this.set("updatedAt", Value.fromBigInt(value));
  }
}

export class PerformanceLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Performance[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Performance[]>(value);
  }
}

export class TranslationLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Translation[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Translation[]>(value);
  }
}
