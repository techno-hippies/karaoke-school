// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
  Int8,
} from "@graphprotocol/graph-ts";

export class Song extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Song entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Song must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Song", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Song | null {
    return changetype<Song | null>(store.get_in_block("Song", id));
  }

  static load(id: string): Song | null {
    return changetype<Song | null>(store.get("Song", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get geniusId(): BigInt {
    let value = this.get("geniusId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set geniusId(value: BigInt) {
    this.set("geniusId", Value.fromBigInt(value));
  }

  get metadataUri(): string {
    let value = this.get("metadataUri");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set metadataUri(value: string) {
    this.set("metadataUri", Value.fromString(value));
  }

  get registeredBy(): Bytes {
    let value = this.get("registeredBy");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set registeredBy(value: Bytes) {
    this.set("registeredBy", Value.fromBytes(value));
  }

  get geniusArtistId(): BigInt {
    let value = this.get("geniusArtistId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set geniusArtistId(value: BigInt) {
    this.set("geniusArtistId", Value.fromBigInt(value));
  }

  get registeredAt(): BigInt {
    let value = this.get("registeredAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set registeredAt(value: BigInt) {
    this.set("registeredAt", Value.fromBigInt(value));
  }

  get segments(): SegmentLoader {
    return new SegmentLoader("Song", this.get("id")!.toString(), "segments");
  }

  get segmentCount(): i32 {
    let value = this.get("segmentCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set segmentCount(value: i32) {
    this.set("segmentCount", Value.fromI32(value));
  }

  get performanceCount(): i32 {
    let value = this.get("performanceCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set performanceCount(value: i32) {
    this.set("performanceCount", Value.fromI32(value));
  }
}

export class Segment extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Segment entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Segment must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Segment", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Segment | null {
    return changetype<Segment | null>(store.get_in_block("Segment", id));
  }

  static load(id: string): Segment | null {
    return changetype<Segment | null>(store.get("Segment", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get segmentHash(): Bytes {
    let value = this.get("segmentHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set segmentHash(value: Bytes) {
    this.set("segmentHash", Value.fromBytes(value));
  }

  get song(): string {
    let value = this.get("song");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set song(value: string) {
    this.set("song", Value.fromString(value));
  }

  get geniusId(): BigInt {
    let value = this.get("geniusId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set geniusId(value: BigInt) {
    this.set("geniusId", Value.fromBigInt(value));
  }

  get tiktokSegmentId(): string {
    let value = this.get("tiktokSegmentId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set tiktokSegmentId(value: string) {
    this.set("tiktokSegmentId", Value.fromString(value));
  }

  get metadataUri(): string {
    let value = this.get("metadataUri");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set metadataUri(value: string) {
    this.set("metadataUri", Value.fromString(value));
  }

  get registeredBy(): Bytes {
    let value = this.get("registeredBy");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set registeredBy(value: Bytes) {
    this.set("registeredBy", Value.fromBytes(value));
  }

  get registeredAt(): BigInt {
    let value = this.get("registeredAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set registeredAt(value: BigInt) {
    this.set("registeredAt", Value.fromBigInt(value));
  }

  get instrumentalUri(): string | null {
    let value = this.get("instrumentalUri");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set instrumentalUri(value: string | null) {
    if (!value) {
      this.unset("instrumentalUri");
    } else {
      this.set("instrumentalUri", Value.fromString(<string>value));
    }
  }

  get alignmentUri(): string | null {
    let value = this.get("alignmentUri");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set alignmentUri(value: string | null) {
    if (!value) {
      this.unset("alignmentUri");
    } else {
      this.set("alignmentUri", Value.fromString(<string>value));
    }
  }

  get processedAt(): BigInt | null {
    let value = this.get("processedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set processedAt(value: BigInt | null) {
    if (!value) {
      this.unset("processedAt");
    } else {
      this.set("processedAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get performances(): PerformanceLoader {
    return new PerformanceLoader(
      "Segment",
      this.get("id")!.toString(),
      "performances",
    );
  }

  get performanceCount(): i32 {
    let value = this.get("performanceCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set performanceCount(value: i32) {
    this.set("performanceCount", Value.fromI32(value));
  }

  get averageScore(): BigDecimal {
    let value = this.get("averageScore");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set averageScore(value: BigDecimal) {
    this.set("averageScore", Value.fromBigDecimal(value));
  }
}

export class Performance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Performance entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Performance must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Performance", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Performance | null {
    return changetype<Performance | null>(
      store.get_in_block("Performance", id),
    );
  }

  static load(id: string): Performance | null {
    return changetype<Performance | null>(store.get("Performance", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get performanceId(): BigInt {
    let value = this.get("performanceId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set performanceId(value: BigInt) {
    this.set("performanceId", Value.fromBigInt(value));
  }

  get segment(): string {
    let value = this.get("segment");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set segment(value: string) {
    this.set("segment", Value.fromString(value));
  }

  get performer(): string {
    let value = this.get("performer");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set performer(value: string) {
    this.set("performer", Value.fromString(value));
  }

  get performerAddress(): Bytes {
    let value = this.get("performerAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set performerAddress(value: Bytes) {
    this.set("performerAddress", Value.fromBytes(value));
  }

  get score(): i32 {
    let value = this.get("score");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set score(value: i32) {
    this.set("score", Value.fromI32(value));
  }

  get metadataUri(): string {
    let value = this.get("metadataUri");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set metadataUri(value: string) {
    this.set("metadataUri", Value.fromString(value));
  }

  get gradedAt(): BigInt {
    let value = this.get("gradedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set gradedAt(value: BigInt) {
    this.set("gradedAt", Value.fromBigInt(value));
  }

  get songId(): BigInt {
    let value = this.get("songId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set songId(value: BigInt) {
    this.set("songId", Value.fromBigInt(value));
  }

  get segmentHash(): Bytes {
    let value = this.get("segmentHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set segmentHash(value: Bytes) {
    this.set("segmentHash", Value.fromBytes(value));
  }
}

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Account entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Account must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Account", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Account | null {
    return changetype<Account | null>(store.get_in_block("Account", id));
  }

  static load(id: string): Account | null {
    return changetype<Account | null>(store.get("Account", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get lensAccountAddress(): Bytes {
    let value = this.get("lensAccountAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set lensAccountAddress(value: Bytes) {
    this.set("lensAccountAddress", Value.fromBytes(value));
  }

  get pkpAddress(): Bytes {
    let value = this.get("pkpAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set pkpAddress(value: Bytes) {
    this.set("pkpAddress", Value.fromBytes(value));
  }

  get username(): string {
    let value = this.get("username");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set username(value: string) {
    this.set("username", Value.fromString(value));
  }

  get metadataUri(): string {
    let value = this.get("metadataUri");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set metadataUri(value: string) {
    this.set("metadataUri", Value.fromString(value));
  }

  get geniusArtistId(): i32 {
    let value = this.get("geniusArtistId");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set geniusArtistId(value: i32) {
    this.set("geniusArtistId", Value.fromI32(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get updatedAt(): BigInt {
    let value = this.get("updatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set updatedAt(value: BigInt) {
    this.set("updatedAt", Value.fromBigInt(value));
  }

  get performances(): PerformanceLoader {
    return new PerformanceLoader(
      "Account",
      this.get("id")!.toString(),
      "performances",
    );
  }

  get performanceCount(): i32 {
    let value = this.get("performanceCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set performanceCount(value: i32) {
    this.set("performanceCount", Value.fromI32(value));
  }

  get totalScore(): BigInt {
    let value = this.get("totalScore");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalScore(value: BigInt) {
    this.set("totalScore", Value.fromBigInt(value));
  }

  get averageScore(): BigDecimal {
    let value = this.get("averageScore");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set averageScore(value: BigDecimal) {
    this.set("averageScore", Value.fromBigDecimal(value));
  }
}

export class GlobalStats extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GlobalStats entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type GlobalStats must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("GlobalStats", id.toString(), this);
    }
  }

  static loadInBlock(id: string): GlobalStats | null {
    return changetype<GlobalStats | null>(
      store.get_in_block("GlobalStats", id),
    );
  }

  static load(id: string): GlobalStats | null {
    return changetype<GlobalStats | null>(store.get("GlobalStats", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalSongs(): i32 {
    let value = this.get("totalSongs");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set totalSongs(value: i32) {
    this.set("totalSongs", Value.fromI32(value));
  }

  get totalSegments(): i32 {
    let value = this.get("totalSegments");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set totalSegments(value: i32) {
    this.set("totalSegments", Value.fromI32(value));
  }

  get totalPerformances(): i32 {
    let value = this.get("totalPerformances");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set totalPerformances(value: i32) {
    this.set("totalPerformances", Value.fromI32(value));
  }

  get totalAccounts(): i32 {
    let value = this.get("totalAccounts");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set totalAccounts(value: i32) {
    this.set("totalAccounts", Value.fromI32(value));
  }
}

export class SegmentLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Segment[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Segment[]>(value);
  }
}

export class PerformanceLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Performance[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Performance[]>(value);
  }
}
