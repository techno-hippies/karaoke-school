"""
A registered song on the platform
Note: GRC-20 handles public music metadata, this is for app-specific song data
"""
type Song @entity(immutable: false) {
  id: ID! # geniusId
  geniusId: BigInt!
  metadataUri: String!
  registeredBy: Bytes!
  geniusArtistId: BigInt!
  registeredAt: BigInt!

  # Legacy relation - used for existing data
  # New segments reference GRC-20 work IDs directly
  segmentCount: Int!
  performanceCount: Int!
  translationCount: Int! # Total translations across all segments
}

"""
A processed segment of a song (karaoke audio with translations)
References GRC-20 work entity for music metadata (decoupled design)
"""
type Segment @entity(immutable: false) {
  id: ID! # segmentHash
  segmentHash: Bytes!
  
  # GRC-20 Reference (Public Music Metadata Layer)
  grc20WorkId: String! # GRC-20 musical work entity UUID (primary reference)
  
  # App-specific data
  spotifyTrackId: String! # Spotify track ID for audio matching
  segmentStartMs: Int! # Start time in milliseconds
  segmentEndMs: Int! # End time in milliseconds
  metadataUri: String!
  registeredBy: Bytes!
  registeredAt: BigInt!

  # Set after processing
  instrumentalUri: String # Grove URI for instrumental (primary audio)
  alignmentUri: String # Grove URI for alignment metadata (ElevenLabs word timing)
  processedAt: BigInt
  translationCount: Int! # Number of translations available

  # Relations
  performances: [Performance!]! @derivedFrom(field: "segment")
  translations: [Translation!]! @derivedFrom(field: "segment")

  # Computed
  performanceCount: Int!
  averageScore: BigDecimal!
  hasInstrumental: Boolean!
  hasAlignments: Boolean!
}

"""
A multi-language translation for a segment
"""
type Translation @entity(immutable: false) {
  id: ID! # segmentHash + languageCode
  segment: Segment!
  segmentHash: Bytes!
  languageCode: String! # ISO 639-1 code (es, zh, ja, ko, etc.)
  translationUri: String! # Grove URI for translation JSON (line-level + word timing)
  translationSource: String! # AI model used (e.g., "gemini-flash-2.5")
  confidenceScore: Int! # 0-10000 (model confidence Ã— 10000)
  validated: Boolean! # Human-verified translation
  addedBy: Bytes!
  addedAt: BigInt!
  updatedAt: BigInt
  enabled: Boolean! # Whether translation is available

  # Computed
  confidenceLevel: String! # HIGH, MEDIUM, LOW based on confidenceScore
}

"""
A graded performance of a segment
"""
type Performance @entity(immutable: true) {
  id: ID! # performanceId
  performanceId: BigInt!
  segment: Segment!
  performer: Account!
  performerAddress: Bytes!
  score: Int! # 0-10000 (basis points)
  metadataUri: String! # Grove URI for full performance metadata
  gradedAt: BigInt!

  # Denormalized for queries
  songId: BigInt!
  segmentHash: Bytes!
}

"""
Lens account with performance history
"""
type Account @entity(immutable: false) {
  id: ID! # lensAccountAddress
  lensAccountAddress: Bytes!
  pkpAddress: Bytes!
  username: String!
  metadataUri: String!
  geniusArtistId: Int # 0 if not an artist
  createdAt: BigInt!
  updatedAt: BigInt!
  verified: Boolean! # Account verification status

  # Relations
  performances: [Performance!]! @derivedFrom(field: "performer")

  # Stats
  performanceCount: Int!
  totalScore: BigInt!
  averageScore: BigDecimal!
  bestScore: Int!
}

"""
Global statistics
"""
type GlobalStats @entity(immutable: false) {
  id: ID! # "global"
  totalSongs: Int!
  totalSegments: Int!
  totalPerformances: Int!
  totalAccounts: Int!
  totalTranslations: Int!
  enabledTranslations: Int!
}

"""
Leaderboard entry for segment performances
"""
type SegmentLeaderboard @entity(immutable: false) {
  id: ID! # segmentHash
  segment: Segment!
  totalPerformers: Int!
  averageScore: BigDecimal!
  highestScore: Int!
  lowestScore: Int!
  createdAt: BigInt!
  updatedAt: BigInt!
}
